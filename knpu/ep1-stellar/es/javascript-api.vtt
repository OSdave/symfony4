WEBVTT

00:00:01.146 --> 00:00:06.216 align:middle
Cuando hacemos clic en el icono del corazón,
necesitamos enviar una petición AJAX al servidor que,

00:00:06.216 --> 00:00:11.446 align:middle
eventualmente, actualizará algo en una base de
datos para mostrar que nos ha gustado este artículo.

00:00:12.446 --> 00:00:18.206 align:middle
Esa ruta de la API también tiene que devolver el nuevo
número de corazones para mostrar en la página...

00:00:18.456 --> 00:00:18.836 align:middle
ya sabes...

00:00:19.286 --> 00:00:22.376 align:middle
por si a otras 10 personas les ha
gustado desde que abrimos la página.

00:00:22.376 --> 00:00:30.276 align:middle
En ArticleController, haz un nuevo
public function toggleArticleHeart():

00:00:31.826 --> 00:00:42.316 align:middle
Luego añade la ruta anterior: @Route("/news/{slug}") -
para que coincida con la URL del programa - y luego /heart.

00:00:43.716 --> 00:00:48.056 align:middle
Dale inmediatamente un
nombre: article_toggle_heart:

00:00:49.216 --> 00:00:54.866 align:middle
He incluido el comodín {slug} en la ruta para
que sepamos qué artículo es el que nos gusta.

00:00:55.816 --> 00:00:59.746 align:middle
También podríamos utilizar el comodín
{id} cuando tengamos una base de datos.

00:01:00.726 --> 00:01:02.626 align:middle
Añade el argumento correspondiente $slug.

00:01:03.446 --> 00:01:10.756 align:middle
Pero como aún no tenemos una base de datos, añadiré un
TODO: "¡realmente me gusta/no me gusta el artículo!":

00:01:13.646 --> 00:01:17.016 align:middle
Queremos que esta ruta de
la API devuelva JSON...

00:01:17.216 --> 00:01:21.436 align:middle
y recuerda: la única regla para
un controlador Symfony es que

00:01:21.436 --> 00:01:24.506 align:middle
debe devolver un objeto Symfony Response.

00:01:25.116 --> 00:01:32.436 align:middle
Así que podríamos decir literalmente return
new Response(json_encode(['hearts' => 5])).

00:01:34.336 --> 00:01:35.416 align:middle
¡Pero eso es demasiado trabajo!

00:01:36.236 --> 00:01:44.756 align:middle
En su lugar, di return new
JsonResponse(['hearts' => rand(5, 100)]:

00:01:45.806 --> 00:01:51.046 align:middle
Aquí no hay nada especial: JsonResponse
es una subclase de Response.

00:01:51.726 --> 00:01:59.256 align:middle
Llama a json_encode() por ti, y también establece
la cabecera Content-Type en application/json,

00:01:59.456 --> 00:02:01.866 align:middle
lo que ayuda a tu JavaScript
a entender las cosas.

00:02:03.186 --> 00:02:04.786 align:middle
Probemos primero esto en el navegador.

00:02:05.236 --> 00:02:07.886 align:middle
Vuelve y añade /heart a la URL.

00:02:09.776 --> 00:02:12.956 align:middle
¡Sí! ¡Nuestro primer punto final de la API!

00:02:13.716 --> 00:02:19.576 align:middle
Al final, esta ruta modificará algo en
el servidor: le "gustará" el artículo.

00:02:20.376 --> 00:02:25.356 align:middle
Así que, como práctica recomendada, no
deberíamos poder hacerle una petición GET.

00:02:26.346 --> 00:02:29.966 align:middle
Hagamos que esta ruta sólo coincida
cuando se haga una petición POST.

00:02:30.866 --> 00:02:36.506 align:middle
¿Cómo? Añadiendo otra opción
a la ruta: methods={"POST"}:

00:02:39.276 --> 00:02:43.986 align:middle
En cuanto lo hagamos, ya no podremos
hacer una petición GET en el navegador:

00:02:44.486 --> 00:02:46.636 align:middle
¡ya no coincide con la ruta!

00:02:48.106 --> 00:02:52.716 align:middle
Corre: ./bin/console debug:router Y verás

00:02:52.716 --> 00:02:56.076 align:middle
que la nueva ruta sólo
responde a peticiones POST.

00:02:56.916 --> 00:02:57.496 align:middle
Bastante bien. Por

00:02:58.276 --> 00:03:01.126 align:middle
cierto, Symfony tiene muchas más herramientas

00:03:01.126 --> 00:03:04.926 align:middle
para crear rutas de la API:
esto es sólo el principio.

00:03:05.466 --> 00:03:07.546 align:middle
¡En futuros tutoriales, iremos más allá!

00:03:09.236 --> 00:03:11.186 align:middle
¡Nuestro punto final de la API está listo!

00:03:11.716 --> 00:03:14.916 align:middle
Copia el nombre de la ruta
y vuelve a article_show.js.

00:03:14.916 --> 00:03:15.266 align:middle
Pero espera...

00:03:15.526 --> 00:03:20.766 align:middle
si queremos hacer una petición
AJAX a la nueva ruta...

00:03:20.766 --> 00:03:23.376 align:middle
¿cómo podemos generar la URL?

00:03:24.176 --> 00:03:26.276 align:middle
Este es un archivo JS puro...

00:03:26.456 --> 00:03:29.326 align:middle
¡así que no podemos utilizar
la función Twig path()!

00:03:30.126 --> 00:03:36.896 align:middle
En realidad, hay un paquete muy bueno
llamado FOSJsRoutingBundle que sí permite

00:03:36.896 --> 00:03:38.826 align:middle
generar rutas en JavaScript.

00:03:39.486 --> 00:03:42.016 align:middle
Pero, voy a mostrarte otra forma sencilla.

00:03:43.156 --> 00:03:45.606 align:middle
De vuelta a la plantilla,
busca la sección del corazón.

00:03:46.536 --> 00:03:47.096 align:middle
Vamos a...

00:03:47.456 --> 00:03:49.386 align:middle
¡rellenar el href en el enlace!

00:03:49.386 --> 00:03:57.326 align:middle
Añade path(), pega el nombre de la ruta, y
pasa el comodín slug a una variable slug:

00:03:58.646 --> 00:03:59.246 align:middle
En realidad...

00:03:59.526 --> 00:04:02.666 align:middle
todavía no hay una variable
slug en esta plantilla.

00:04:03.346 --> 00:04:07.026 align:middle
Si te fijas en ArticleController,
sólo estamos pasando dos variables.

00:04:08.206 --> 00:04:11.846 align:middle
Añade una tercera: slug ajustada a $slug:

00:04:13.216 --> 00:04:16.366 align:middle
Eso debería al menos fijar la URL del enlace.

00:04:18.076 --> 00:04:20.676 align:middle
Vuelve a la página del programa
en tu navegador y actualiza.

00:04:24.256 --> 00:04:26.846 align:middle
¡Sí! El enlace del corazón está conectado.

00:04:28.196 --> 00:04:30.036 align:middle
¿Por qué hemos hecho esto?

00:04:30.746 --> 00:04:34.966 align:middle
Porque ahora podemos obtener esa
URL muy fácilmente en JavaScript.

00:04:35.626 --> 00:04:47.216 align:middle
Añade $.ajax({}) y pasa method:
'POST' y url a $link.attr('href'):

00:04:47.216 --> 00:04:47.766 align:middle
¡Eso es todo!

00:04:48.376 --> 00:04:53.386 align:middle
Al final, añade .done() con una devolución
de llamada que tenga un argumento data:

00:04:54.546 --> 00:04:57.906 align:middle
El data será lo que devuelva
nuestra ruta de la API.

00:04:58.776 --> 00:05:06.136 align:middle
Eso significa que podemos mover la línea HTML de recuento
de artículos a esto, y establecerla en data.hearts:

00:05:07.406 --> 00:05:11.196 align:middle
Ah, y si no estás familiarizado con
la función .done() o con las promesas,

00:05:11.476 --> 00:05:14.606 align:middle
te recomiendo encarecidamente que
consultes nuestro Curso de JavaScript.

00:05:15.176 --> 00:05:19.716 align:middle
No es material para principiantes: está
pensado para llevar tu JS al siguiente nivel.

00:05:20.926 --> 00:05:21.446 align:middle
De todos modos...

00:05:21.716 --> 00:05:22.986 align:middle
¡probemos ya!

00:05:23.436 --> 00:05:25.656 align:middle
¡Refresca! Y...

00:05:25.656 --> 00:05:28.686 align:middle
¡clic! ¡Funciona!

00:05:29.126 --> 00:05:31.186 align:middle
Y... ¡tengo una sorpresa!

00:05:31.186 --> 00:05:34.976 align:middle
¿Ves este pequeño icono de flecha en la
barra de herramientas de depuración de la web?

00:05:35.716 --> 00:05:39.766 align:middle
Apareció en cuanto hicimos
la primera petición AJAX.

00:05:40.736 --> 00:05:45.496 align:middle
En realidad, cada vez que hacemos una petición
AJAX, ¡se añade al principio de esta lista!

00:05:46.256 --> 00:05:49.606 align:middle
Esto es genial porque
-¿recuerdas el perfilador?

00:05:50.186 --> 00:05:54.766 align:middle
- puedes hacer clic para ver el
perfil de cualquier petición AJAX.

00:05:55.866 --> 00:06:00.586 align:middle
Sí, ahora tienes todas las herramientas de
rendimiento y depuración a tu alcance...

00:06:01.076 --> 00:06:02.776 align:middle
incluso para las llamadas AJAX.

00:06:03.946 --> 00:06:08.636 align:middle
Ah, y si hubiera un error, lo
verías en toda su hermosa y

00:06:08.796 --> 00:06:11.166 align:middle
estilizada gloria en la pestaña Excepción.

00:06:12.176 --> 00:06:15.466 align:middle
Poder cargar el perfilador para
una llamada AJAX es una especie de

00:06:15.466 --> 00:06:18.216 align:middle
huevo de pascua: no todo el mundo lo conoce.

00:06:18.546 --> 00:06:19.886 align:middle
Pero debería hacerlo.

00:06:19.886 --> 00:06:25.696 align:middle
Creo que es hora de hablar de la parte
más importante de Symfony: Fabien.

00:06:26.026 --> 00:06:27.636 align:middle
Es decir, los servicios
