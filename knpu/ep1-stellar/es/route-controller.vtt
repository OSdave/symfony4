WEBVTT

00:00:01.086 --> 00:00:03.426 align:middle
¡Vamos a crear nuestra primera página!

00:00:04.176 --> 00:00:10.526 align:middle
En realidad, éste es el principal trabajo de un
framework: ofrecerte un sistema de rutas y controladores.

00:00:11.846 --> 00:00:17.866 align:middle
Una ruta es la configuración que define la URL
de una página y un controlador es una función

00:00:17.866 --> 00:00:22.186 align:middle
que escribimos y que realmente
construye el contenido de esa página.

00:00:22.936 --> 00:00:24.096 align:middle
Y ahora mismo...

00:00:24.416 --> 00:00:26.956 align:middle
¡nuestra aplicación es realmente pequeña! En

00:00:27.846 --> 00:00:33.086 align:middle
lugar de sobrecargar tu proyecto con todas
las funciones posibles que puedas necesitar

00:00:33.086 --> 00:00:35.616 align:middle
-después de todo, aún no
estamos en gravedad cero-,

00:00:36.316 --> 00:00:40.776 align:middle
una aplicación Symfony es básicamente un
pequeño sistema de rutas y controladores.

00:00:41.516 --> 00:00:45.986 align:middle
Más adelante, instalaremos más funciones
cuando las necesitemos, ¡como un motor warp!

00:00:46.676 --> 00:00:48.426 align:middle
Eso siempre es útil.

00:00:49.256 --> 00:00:52.616 align:middle
En realidad, añadir más funciones
va a ser bastante asombroso.

00:00:53.346 --> 00:00:54.256 align:middle
Más adelante hablaremos de ello.

00:00:55.246 --> 00:00:59.626 align:middle
Abre el archivo de enrutamiento principal
de tu aplicación: config/routes.yaml:

00:01:00.526 --> 00:01:02.976 align:middle
¡Ya tenemos un ejemplo!

00:01:03.606 --> 00:01:04.446 align:middle
Descomenta eso.

00:01:05.796 --> 00:01:09.566 align:middle
Ignora la clave index por
ahora: es el nombre interno

00:01:09.566 --> 00:01:11.626 align:middle
de la ruta, pero no es importante todavía.

00:01:12.406 --> 00:01:15.026 align:middle
Esto dice que cuando alguien
va a la página de inicio - / -

00:01:15.246 --> 00:01:20.856 align:middle
Symfony debe ejecutar un método
index() en una clase DefaultController.

00:01:22.576 --> 00:01:26.436 align:middle
Cambia esto por ArticleController
y el método por homepage:

00:01:26.526 --> 00:01:27.976 align:middle
Y... ¡sí!

00:01:27.976 --> 00:01:29.816 align:middle
¡Eso es una ruta!

00:01:30.446 --> 00:01:36.136 align:middle
¡Hola ruta! Define la URL y le dice a Symfony
qué función del controlador debe ejecutar.

00:01:37.376 --> 00:01:40.976 align:middle
La clase del controlador aún no
existe, ¡así que vamos a crearla!

00:01:41.616 --> 00:01:47.306 align:middle
Haz clic con el botón derecho en el directorio
Controller y ve a "Nuevo" o pulsa Cmd+N en un Mac.

00:01:47.886 --> 00:01:49.036 align:middle
Elige "Clase PHP".

00:01:50.176 --> 00:01:54.456 align:middle
Y, ¡sí! ¿Recuerdas la configuración
de Composer que hicimos en Preferencias?

00:01:54.896 --> 00:01:59.296 align:middle
Gracias a eso, ¡PhpStorm adivina
correctamente el espacio de nombres!

00:01:59.886 --> 00:02:01.756 align:middle
La fuerza es fuerte con esto...

00:02:02.816 --> 00:02:08.666 align:middle
El espacio de nombres para cada clase en src/ debe
ser App más el subdirectorio en el que se encuentre.

00:02:09.546 --> 00:02:11.206 align:middle
Nombra esto ArticleController:

00:02:15.056 --> 00:02:17.736 align:middle
Y dentro, añade public function homepage():

00:02:19.206 --> 00:02:21.666 align:middle
Esta función es el controlador...

00:02:21.666 --> 00:02:24.376 align:middle
y es nuestro lugar para construir la página.

00:02:25.186 --> 00:02:32.046 align:middle
Para mayor confusión, también se llama
"acción", o "ghob" para sus amigos klingon.

00:02:32.836 --> 00:02:38.286 align:middle
En cualquier caso, aquí podemos hacer lo que queramos:
hacer consultas a la base de datos, llamadas a la API,

00:02:38.436 --> 00:02:43.246 align:middle
tomar muestras del suelo en busca de materiales
orgánicos o representar una plantilla.

00:02:44.116 --> 00:02:50.576 align:middle
Sólo hay una regla: un controlador debe
devolver un objeto Symfony Response.

00:02:51.436 --> 00:02:58.016 align:middle
Así que digamos: return new Response():
queremos el de HttpFoundation.

00:02:59.216 --> 00:03:02.206 align:middle
Dale un mensaje de calma: OMG!

00:03:02.206 --> 00:03:03.996 align:middle
¡Ya es mi primera página!

00:03:04.676 --> 00:03:06.516 align:middle
WOOO!: Ejem.

00:03:06.516 --> 00:03:12.466 align:middle
Ah, y mira esto: cuando dejé que PhpStorm
autocompletara la clase Response añadió esta

00:03:12.466 --> 00:03:15.206 align:middle
declaraciónuse al principio
del archivo automáticamente:

00:03:15.756 --> 00:03:17.206 align:middle
Verás que lo hago a menudo.

00:03:17.886 --> 00:03:18.636 align:middle
¡Buen trabajo Storm!

00:03:19.636 --> 00:03:20.636 align:middle
¡Vamos a probar la página!

00:03:21.046 --> 00:03:21.766 align:middle
Encuentra tu navegador.

00:03:22.656 --> 00:03:27.206 align:middle
Oh, esta página de "Bienvenida" sólo se
muestra si no tienes ninguna ruta configurada.

00:03:27.916 --> 00:03:29.646 align:middle
¡Refresca! ¡Sí!

00:03:30.016 --> 00:03:31.906 align:middle
Esta es nuestra página.

00:03:32.176 --> 00:03:33.826 align:middle
Nuestra primera de muchas.

00:03:34.616 --> 00:03:38.466 align:middle
Ha sido bastante fácil,
¡pero puede ser más fácil!

00:03:39.016 --> 00:03:43.916 align:middle
En lugar de crear nuestras rutas en YAML, vamos a
utilizar una función genial llamada anotaciones.

00:03:44.776 --> 00:03:47.636 align:middle
Se trata de una función adicional,
así que tenemos que instalarla.

00:03:47.636 --> 00:03:55.856 align:middle
Busca tu terminal abierto y ejecútalo:
composer require annotations Interesante...

00:03:56.316 --> 00:04:02.326 align:middle
este paquete annotations realmente
instaló sensio/framework-extra-bundle.

00:04:03.286 --> 00:04:06.276 align:middle
Vamos a hablar de cómo funciona muy pronto.

00:04:07.246 --> 00:04:09.386 align:middle
Ahora, sobre estas rutas de anotación.

00:04:10.286 --> 00:04:11.806 align:middle
Comenta la ruta YAML:

00:04:12.576 --> 00:04:19.356 align:middle
Luego, en ArticleController, encima del método
del controlador, añade /**, pulsa enter, borra

00:04:19.756 --> 00:04:22.616 align:middle
esto y pon @Route().

00:04:23.476 --> 00:04:28.206 align:middle
Puedes utilizar cualquiera de las dos clases, pero asegúrate
de que PhpStorm añade la declaración use en la parte superior.

00:04:28.626 --> 00:04:29.096 align:middle
Luego añade "/":

00:04:29.516 --> 00:04:30.506 align:middle
¡Eso es todo!

00:04:31.126 --> 00:04:37.766 align:middle
La ruta está definida justo
encima del controlador,

00:04:38.636 --> 00:04:43.246 align:middle
por eso me encantan las rutas con
anotaciones: todo está en un solo lugar.

00:04:44.026 --> 00:04:46.816 align:middle
Pero no te fíes de mí, busca
tu navegador y actualízalo.

00:04:47.856 --> 00:04:49.086 align:middle
¡Es un traaaaap!

00:04:49.086 --> 00:04:50.506 align:middle
Es decir, ¡funciona!

00:04:51.006 --> 00:04:53.006 align:middle
¿Qué más podemos hacer con las rutas?

00:04:53.906 --> 00:04:56.396 align:middle
Crea otra función pública llamada show().

00:04:57.076 --> 00:05:00.766 align:middle
Quiero que esta página acabe
mostrando un artículo completo.

00:05:02.406 --> 00:05:08.496 align:middle
Dale una ruta:
@Route("/news/why-asteroids-taste-like-bacon"):

00:05:10.006 --> 00:05:12.976 align:middle
Al final, así es como queremos
que se vean nuestras URLs.

00:05:13.576 --> 00:05:17.926 align:middle
Esto se llama "slug", es una
versión de la URL del título. Como

00:05:19.306 --> 00:05:24.836 align:middle
siempre, devuelve un new Response('Future
page to show one space article!'):

00:05:26.576 --> 00:05:29.926 align:middle
¡Perfecto! Copia esa URL y
pruébala en tu navegador.

00:05:33.176 --> 00:05:34.356 align:middle
Funciona...

00:05:34.486 --> 00:05:35.996 align:middle
pero ¡esto apesta!

00:05:36.526 --> 00:05:42.226 align:middle
No quiero construir una ruta y un controlador
para cada artículo que vive en la base de datos.

00:05:42.886 --> 00:05:47.346 align:middle
No, necesitamos una ruta que pueda
coincidir con /news/ cualquier cosa.

00:05:48.196 --> 00:05:51.246 align:middle
¿Cómo? Utiliza {slug}:

00:05:51.246 --> 00:06:00.626 align:middle
Esta ruta ahora coincide con /news/
cualquier cosa: que {slug} es un comodín.

00:06:01.496 --> 00:06:04.256 align:middle
Ah, y el nombre slug puede ser cualquier cosa.

00:06:04.656 --> 00:06:12.216 align:middle
Pero lo que elijas ahora estará disponible como
argumento de tu "ghob", es decir, de tu acción.

00:06:12.656 --> 00:06:15.076 align:middle
Así que vamos a refactorizar nuestro
mensaje de éxito para que diga

00:06:15.436 --> 00:06:19.276 align:middle
Futura página para mostrar el
artículo Y luego esa babosa:

00:06:23.106 --> 00:06:25.776 align:middle
¡Inténtalo! Actualiza la misma URL.

00:06:26.806 --> 00:06:30.936 align:middle
Sí, coincide con la ruta y el slug se imprime

00:06:31.676 --> 00:06:35.516 align:middle
Cámbialo por otra cosa:
/why-asteroids-taste-like-tacos.

00:06:35.736 --> 00:06:38.256 align:middle
¡Qué rico!

00:06:38.876 --> 00:06:39.836 align:middle
Vuelve a la panceta...

00:06:40.146 --> 00:06:40.676 align:middle
porque...

00:06:40.676 --> 00:06:41.126 align:middle
ya sabes...

00:06:41.606 --> 00:06:44.876 align:middle
todo el mundo sabe que a eso es a lo
que realmente saben los asteroides.

00:06:45.696 --> 00:06:46.266 align:middle
Y... ¡sí!

00:06:46.596 --> 00:06:54.136 align:middle
Llevamos 3 capítulos y ya conoces la primera mitad
de Symfony: el sistema de rutas y controladores.

00:06:54.786 --> 00:07:01.296 align:middle
Claro que puedes hacer cosas más sofisticadas con las rutas,
como hacer coincidir expresiones regulares, métodos HTTP

00:07:01.456 --> 00:07:05.456 align:middle
o nombres de host, pero todo eso te resultará
bastante fácil ahora. Es hora de pasar

00:07:06.316 --> 00:07:10.866 align:middle
a algo realmente importante:
es hora de aprender

00:07:10.866 --> 00:07:14.046 align:middle
sobre Symfony Flex y el sistema de recetas.

00:07:14.526 --> 00:07:15.116 align:middle
¡Qué bien!
